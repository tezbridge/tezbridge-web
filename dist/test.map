{"version":3,"sources":["util.js","index.js"],"names":["assert","v","m","ok","console","log","RPCFn","raw_url","data","method","Promise","resolve","reject","parsed_url","url","parse","options","hostname","port","path","headers","req","https","request","res","on","d","toString","JSON","err","e","write","stringify","end","network_client","TezBridgeNetwork","host","package_tests","r","mixed","makeOriginationBytes","source","public_key","spendable","delegatable","script","code","storage","key_pair","TezBridgeCrypto","crypto","decryptKey","signature","signOperation","operation_hex","getSecretKey","preapplyed_result","submit","preapply_operation","branch","contents","protocol","main"],"mappings":";AAYO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA,QAAA,YAAA,EATP,IAAA,EAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,UACA,EAAA,EAAA,QAAA,QAOO,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GALA,MAAMA,EAAS,CAACC,EAAQC,KACrBC,EAAAA,QAAAA,GAAGF,EAAGC,GACdE,QAAQC,IAAI,cAAoB,SAAUH,IAGrC,QAAA,OAAA,EAAA,MAAMI,EAAQ,CAACC,EAAiBC,EAAgBC,IAC9C,IAAIC,QAAiB,CAACC,EAASC,KAC9BC,MAAAA,EAAaC,EAAIC,QAAAA,MAAMR,GACvBS,EAAU,CACdC,SAAUJ,EAAWI,SACrBC,KAAML,EAAWK,KACjBC,KAAMN,EAAWM,KACjBV,OAAAA,EACAW,QAAS,CACS,eAAA,qBAIdC,EAAMC,EAAMC,QAAAA,QAAQP,EAAUQ,IAC9BhB,IAAAA,EAAO,GACXgB,EAAIC,GAAG,OAASC,IACdlB,GAAQkB,EAAEC,aAGZH,EAAIC,GAAG,MAAO,KACR,IACFd,EAAQiB,KAAKb,MAAMP,IACnB,MAAMqB,GACNzB,QAAQC,IAAI,cAAoB,gCAAiCG,QAKvEa,EAAII,GAAG,QAAUK,IACflB,EAAOkB,KAGM,SAAXrB,GACFY,EAAIU,MAAMH,KAAKI,UAAUxB,IAG3Ba,EAAIY,QApCD,QAAA,MAAA;;AC0BH,aApCJ,IAAA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,sBACA,EAAA,QAAA,UAkCI,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAhCJ,MAAMC,EAAiB,IAAIC,EAAJ,QAAqB,CAC1CC,KAAM,gCACN9B,MAAAA,EAAAA,QAGI+B,EAAgB,UACpB,CACQC,MAAAA,QAAmBJ,EAAeK,MAAMC,qBAAqB,CACjEC,OAAQ,uCACRC,WAAY,0DACX,CACDC,WAAW,EACXC,aAAa,EACbC,OAAQ,CACNC,KAAM,CAAC,CAAQ,KAAA,YAAmB,KAAA,CAAC,CAAQ,KAAA,WAAkB,KAAA,CAAC,CAAQ,KAAA,SAAkB,OAAA,CAAC,SAAS,CAAQ,KAAA,UAAiB,KAAA,CAAC,CAAQ,KAAA,UAAU,CAAQ,KAAA,OAAc,KAAA,CAAC,CAAC,CAAQ,KAAA,MAAe,OAAA,CAAC,qBAAqB,CAAQ,KAAA,MAAa,KAAA,CAAC,CAAQ,KAAA,eAAe,CAAQ,KAAA,YACxQC,QAAS,CAAQ,KAAA,OAAc,KAAA,CAAC,GAAG,CAAQ,KAAA,aAIzCC,EAAWC,EAAgBC,QAAAA,OAAOC,WAAW,2FAA4F,KAC/Ib,EAAEc,UAAYH,EAAgBC,QAAAA,OAAOG,cAAcf,EAAEgB,cAAeN,EAASO,gBAEvEC,MAAAA,QAA0BtB,EAAeuB,OAAOC,mBAAmBpB,EAAEqB,OAAQrB,EAAEsB,SAAUtB,EAAEuB,SAAUvB,EAAEc,WAC7GhD,QAAQC,IAAImD,KAKVM,EAAO,gBACLzB,KAGRyB","file":"test.map","sourceRoot":"../test","sourcesContent":["// @flow\n\nimport type { TezJSON } from './../src/types'\nimport _assert from 'assert'\nimport https from 'https'\nimport url from 'url'\n\nexport const assert = (v: any, m : string) => {\n  _assert.ok(v, m)\n  console.log('\\x1b[32m%s\\x1b[0m','PASS @', m)\n}\n\nexport const RPCFn = (raw_url: string, data?: TezJSON, method: 'POST' | 'GET') => {\n  return new Promise<TezJSON>((resolve, reject) => {\n    const parsed_url = url.parse(raw_url)\n    const options = {\n      hostname: parsed_url.hostname,\n      port: parsed_url.port,\n      path: parsed_url.path,\n      method,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    const req = https.request(options, (res) => {\n      let data = ''\n      res.on('data', (d) => {\n        data += d.toString()\n      })\n\n      res.on('end', () => {\n        try {\n          resolve(JSON.parse(data))\n        } catch(err) {\n          console.log('\\x1b[31m%s\\x1b[0m','RPC result JSON.parse error: ', data)\n        }\n      })\n    })\n\n    req.on('error', (e) => {\n      reject(e)\n    })\n\n    if (method === 'POST') {\n      req.write(JSON.stringify(data))\n    }\n\n    req.end()\n  })\n}","// @flow\n\nimport TezBridgeCrypto from 'tezbridge-crypto'\nimport TezBridgeNetwork from 'tezbridge-network'\nimport { assert, RPCFn } from './util'\n\nconst network_client = new TezBridgeNetwork({\n  host: 'https://testnet.tezbridge.com',\n  RPCFn\n})\n\nconst package_tests = async () => {\n  {\n    const r : Object = await network_client.mixed.makeOriginationBytes({\n      source: 'tz1hgWvYdzLECdrq5zndGHwCGnUCJq1KFe3r',\n      public_key: 'edpkunm1aRnRtHwVsBGSFgKmw5EhBn4gR6NC5JqVoAi57viSgAN3t5'\n    }, {\n      spendable: false,\n      delegatable: false,\n      script: {\n        code: [{\"prim\":\"parameter\",\"args\":[{\"prim\":\"contract\",\"args\":[{\"prim\":\"unit\"}],\"annots\":[\":X\"]}]},{\"prim\":\"storage\",\"args\":[{\"prim\":\"unit\"}]},{\"prim\":\"code\",\"args\":[[{\"prim\":\"CDR\",\"annots\":[\"@storage_slash_1\"]},{\"prim\":\"NIL\",\"args\":[{\"prim\":\"operation\"}]},{\"prim\":\"PAIR\"}]]}],\n        storage: {\"prim\":\"Pair\",\"args\":[[],{\"prim\":\"Unit\"}]}\n      }\n    })\n\n    const key_pair = TezBridgeCrypto.crypto.decryptKey('edesk1TgH1sGSQ2rwM1Sk475ikTLqeYrSH2a6tvUuZdzkox8C91n55pVGo7QpxbFhT1KAe3zpPFWPvrusrBY9fnc', 'a')\n    r.signature = TezBridgeCrypto.crypto.signOperation(r.operation_hex, key_pair.getSecretKey())\n\n    const preapplyed_result = await network_client.submit.preapply_operation(r.branch, r.contents, r.protocol, r.signature)\n    console.log(preapplyed_result)\n  }\n\n}\n\nconst main = async () => {\n  await package_tests()\n}\n\nmain()\n"]}